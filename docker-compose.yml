version: '3'
services:
  prometheus:
    image: prom/prometheus
    container_name: Prometheus
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    networks:
      net_postgres:
        ipv4_address: 172.16.18.2
        
  # ---------------------------------------------------------------------------

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: Plex
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Sao_Paulo
      - VERSION=docker
      - PLEX_CLAIM= #optional
    volumes:
      - /path/to/library:/config
      - /path/to/tvseries:/tv
      - C:\Plex\:/movies
    ports:
      - 32400:32400
    restart: unless-stopped
    networks:
      net_postgres:
        ipv4_address: 172.16.18.3

  # ---------------------------------------------------------------------------

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - '3000:3000'
  #   restart: unless-stopped
  #   networks:
  #     net_postgres:
  #       ipv4_address: 172.16.18.4

  # ---------------------------------------------------------------------------

  homeassistant:
    container_name: Homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ./homeassistant/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    ports:
      - 8123:8123
    networks:
      net_postgres:
        ipv4_address: 172.16.18.5

  # ---------------------------------------------------------------------------

  # homebridge:
  #   image: homebridge/homebridge:latest
  #   container_name: Homebridge
  #   restart: always
  #   volumes:
  #     - ./volumes/homebridge:/homebridge
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: "10mb"
  #       max-file: "1"
  #   ports:
  #     - 8581:8581
  #   networks:
  #     net_postgres:
  #       ipv4_address: 172.16.18.6
  
  # ---------------------------------------------------------------------------

  # gladys:
  #   image: gladysassistant/gladys:v4
  #   container_name: Gladys
  #   restart: always
  #   privileged: true
  #   environment:
  #     - NODE_ENV=production
  #     - SERVER_PORT=80
  #     - TZ=Europe/Paris
  #     - SQLITE_FILE_PATH=/var/lib/gladysassistant/gladys-production.db
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/gladysassistant:/var/lib/gladysassistant
  #     - /dev:/dev
  #     - /run/udev:/run/udev:ro
  #   logging:
  #     driver: json-file
  #     options:
  #       max-size: 10m
  #   ports:
  #     - 80:80
  #   networks:
  #     net_postgres:
  #       ipv4_address: 172.16.18.7
  
  # ---------------------------------------------------------------------------

  # netdata:
  #   image: netdata/netdata:stable
  #   container_name: Netdata
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #     - SYS_ADMIN
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /etc/localtime:/etc/localtime:ro
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /etc/os-release:/host/etc/os-release:ro
  #     - /var/log:/host/var/log:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   ports:
  #     - 19999:19999
  #   environment:
  #     - NETDATA_CLAIM_TOKEN=
  #     - NETDATA_CLAIM_URL=https://app.netdata.cloud
  #     - NETDATA_CLAIM_ROOMS=
  #   networks:
  #     net_postgres:
  #       ipv4_address: 172.16.18.8

  # ---------------------------------------------------------------------------

  # pihole:
  #   container_name: pihole
  #   image: pihole/pihole:latest
  #   # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
  #   ports:
  #     - "53:53/tcp"
  #     - "53:53/udp"
  #     - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
  #     - "80:80/tcp"
  #   environment:
  #     TZ: 'America/Cuiaba'
  #     # WEBPASSWORD: 'set a secure password here or it will be random'
  #   # Volumes store your data between container upgrades
  #   volumes:
  #     - './etc-pihole:/etc/pihole'
  #     - './etc-dnsmasq.d:/etc/dnsmasq.d'
  #   #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
  #   cap_add:
  #     - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
  #   restart: unless-stopped
  #   networks:
  #     net_postgres:
  #       ipv4_address: 172.16.18.9

  # ---------------------------------------------------------------------------

  deye-mqtt:
    container_name: MQTT_MODBUS
    image: ghcr.io/kbialek/deye-inverter-mqtt
    volumes:
      - ./mqtt_modbus/:/mqtt_modbus/
    env_file:
      - ./mqtt_modbus/config.env
  emqx:
    container_name: EMQX
    image: emqx:latest
    environment:
    - "EMQX_NAME=emqx"
    - "EMQX_HOST=node1.emqx.io"
    - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
    - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io, emqx@node2.emqx.io]"
    #default user/password: admin/public
    ports:
      - 1883:1883
      - 8083:8083
      - 8883:8883
      - 14567:14567
      - 8084:8084
      - 18083:18083
    networks:
      net_postgres:
        ipv4_address: 172.16.18.10

networks:
  net_postgres:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.18.0/24